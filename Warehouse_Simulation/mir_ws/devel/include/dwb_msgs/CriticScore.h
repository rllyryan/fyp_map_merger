// Generated by gencpp from file dwb_msgs/CriticScore.msg
// DO NOT EDIT!


#ifndef DWB_MSGS_MESSAGE_CRITICSCORE_H
#define DWB_MSGS_MESSAGE_CRITICSCORE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dwb_msgs
{
template <class ContainerAllocator>
struct CriticScore_
{
  typedef CriticScore_<ContainerAllocator> Type;

  CriticScore_()
    : name()
    , raw_score(0.0)
    , scale(0.0)  {
    }
  CriticScore_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , raw_score(0.0)
    , scale(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef float _raw_score_type;
  _raw_score_type raw_score;

   typedef float _scale_type;
  _scale_type scale;





  typedef boost::shared_ptr< ::dwb_msgs::CriticScore_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dwb_msgs::CriticScore_<ContainerAllocator> const> ConstPtr;

}; // struct CriticScore_

typedef ::dwb_msgs::CriticScore_<std::allocator<void> > CriticScore;

typedef boost::shared_ptr< ::dwb_msgs::CriticScore > CriticScorePtr;
typedef boost::shared_ptr< ::dwb_msgs::CriticScore const> CriticScoreConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dwb_msgs::CriticScore_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dwb_msgs::CriticScore_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dwb_msgs::CriticScore_<ContainerAllocator1> & lhs, const ::dwb_msgs::CriticScore_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.raw_score == rhs.raw_score &&
    lhs.scale == rhs.scale;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dwb_msgs::CriticScore_<ContainerAllocator1> & lhs, const ::dwb_msgs::CriticScore_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dwb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dwb_msgs::CriticScore_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dwb_msgs::CriticScore_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dwb_msgs::CriticScore_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dwb_msgs::CriticScore_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dwb_msgs::CriticScore_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dwb_msgs::CriticScore_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dwb_msgs::CriticScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "442332720f7b0ede3653c34ceeb74662";
  }

  static const char* value(const ::dwb_msgs::CriticScore_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x442332720f7b0edeULL;
  static const uint64_t static_value2 = 0x3653c34ceeb74662ULL;
};

template<class ContainerAllocator>
struct DataType< ::dwb_msgs::CriticScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dwb_msgs/CriticScore";
  }

  static const char* value(const ::dwb_msgs::CriticScore_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dwb_msgs::CriticScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The result from one critic scoring a Twist.\n"
"# Name of the critic\n"
"string name\n"
"# Score for the critic, not multiplied by the scale\n"
"float32 raw_score\n"
"# Scale for the critic, multiplied by the raw_score and added to the total score\n"
"float32 scale\n"
;
  }

  static const char* value(const ::dwb_msgs::CriticScore_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dwb_msgs::CriticScore_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.raw_score);
      stream.next(m.scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CriticScore_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dwb_msgs::CriticScore_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dwb_msgs::CriticScore_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "raw_score: ";
    Printer<float>::stream(s, indent + "  ", v.raw_score);
    s << indent << "scale: ";
    Printer<float>::stream(s, indent + "  ", v.scale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DWB_MSGS_MESSAGE_CRITICSCORE_H
