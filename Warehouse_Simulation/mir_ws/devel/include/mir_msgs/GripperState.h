// Generated by gencpp from file mir_msgs/GripperState.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_GRIPPERSTATE_H
#define MIR_MSGS_MESSAGE_GRIPPERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct GripperState_
{
  typedef GripperState_<ContainerAllocator> Type;

  GripperState_()
    : state_string()
    , state(0)
    , closed(false)  {
    }
  GripperState_(const ContainerAllocator& _alloc)
    : state_string(_alloc)
    , state(0)
    , closed(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_string_type;
  _state_string_type state_string;

   typedef uint8_t _state_type;
  _state_type state;

   typedef uint8_t _closed_type;
  _closed_type closed;





  typedef boost::shared_ptr< ::mir_msgs::GripperState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::GripperState_<ContainerAllocator> const> ConstPtr;

}; // struct GripperState_

typedef ::mir_msgs::GripperState_<std::allocator<void> > GripperState;

typedef boost::shared_ptr< ::mir_msgs::GripperState > GripperStatePtr;
typedef boost::shared_ptr< ::mir_msgs::GripperState const> GripperStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::GripperState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::GripperState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::GripperState_<ContainerAllocator1> & lhs, const ::mir_msgs::GripperState_<ContainerAllocator2> & rhs)
{
  return lhs.state_string == rhs.state_string &&
    lhs.state == rhs.state &&
    lhs.closed == rhs.closed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::GripperState_<ContainerAllocator1> & lhs, const ::mir_msgs::GripperState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::GripperState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::GripperState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::GripperState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::GripperState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::GripperState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::GripperState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "163f067f3329a2206fb2ea4c82fe8782";
  }

  static const char* value(const ::mir_msgs::GripperState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x163f067f3329a220ULL;
  static const uint64_t static_value2 = 0x6fb2ea4c82fe8782ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/GripperState";
  }

  static const char* value(const ::mir_msgs::GripperState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string state_string\n"
"uint8 state\n"
"bool closed\n"
;
  }

  static const char* value(const ::mir_msgs::GripperState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::GripperState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_string);
      stream.next(m.state);
      stream.next(m.closed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::GripperState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::GripperState_<ContainerAllocator>& v)
  {
    s << indent << "state_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_string);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "closed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.closed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_GRIPPERSTATE_H
