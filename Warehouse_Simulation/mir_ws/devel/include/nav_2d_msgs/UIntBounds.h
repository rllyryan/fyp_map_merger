// Generated by gencpp from file nav_2d_msgs/UIntBounds.msg
// DO NOT EDIT!


#ifndef NAV_2D_MSGS_MESSAGE_UINTBOUNDS_H
#define NAV_2D_MSGS_MESSAGE_UINTBOUNDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nav_2d_msgs
{
template <class ContainerAllocator>
struct UIntBounds_
{
  typedef UIntBounds_<ContainerAllocator> Type;

  UIntBounds_()
    : min_x(0)
    , min_y(0)
    , max_x(0)
    , max_y(0)  {
    }
  UIntBounds_(const ContainerAllocator& _alloc)
    : min_x(0)
    , min_y(0)
    , max_x(0)
    , max_y(0)  {
  (void)_alloc;
    }



   typedef uint32_t _min_x_type;
  _min_x_type min_x;

   typedef uint32_t _min_y_type;
  _min_y_type min_y;

   typedef uint32_t _max_x_type;
  _max_x_type max_x;

   typedef uint32_t _max_y_type;
  _max_y_type max_y;





  typedef boost::shared_ptr< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> const> ConstPtr;

}; // struct UIntBounds_

typedef ::nav_2d_msgs::UIntBounds_<std::allocator<void> > UIntBounds;

typedef boost::shared_ptr< ::nav_2d_msgs::UIntBounds > UIntBoundsPtr;
typedef boost::shared_ptr< ::nav_2d_msgs::UIntBounds const> UIntBoundsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav_2d_msgs::UIntBounds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nav_2d_msgs::UIntBounds_<ContainerAllocator1> & lhs, const ::nav_2d_msgs::UIntBounds_<ContainerAllocator2> & rhs)
{
  return lhs.min_x == rhs.min_x &&
    lhs.min_y == rhs.min_y &&
    lhs.max_x == rhs.max_x &&
    lhs.max_y == rhs.max_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nav_2d_msgs::UIntBounds_<ContainerAllocator1> & lhs, const ::nav_2d_msgs::UIntBounds_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nav_2d_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32cc77a889ecfebef439f3192db73e63";
  }

  static const char* value(const ::nav_2d_msgs::UIntBounds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32cc77a889ecfebeULL;
  static const uint64_t static_value2 = 0xf439f3192db73e63ULL;
};

template<class ContainerAllocator>
struct DataType< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_2d_msgs/UIntBounds";
  }

  static const char* value(const ::nav_2d_msgs::UIntBounds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Bounds are inclusive\n"
"uint32 min_x\n"
"uint32 min_y\n"
"uint32 max_x\n"
"uint32 max_y\n"
;
  }

  static const char* value(const ::nav_2d_msgs::UIntBounds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.min_x);
      stream.next(m.min_y);
      stream.next(m.max_x);
      stream.next(m.max_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UIntBounds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav_2d_msgs::UIntBounds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav_2d_msgs::UIntBounds_<ContainerAllocator>& v)
  {
    s << indent << "min_x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.min_x);
    s << indent << "min_y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.min_y);
    s << indent << "max_x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.max_x);
    s << indent << "max_y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.max_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_2D_MSGS_MESSAGE_UINTBOUNDS_H
