// Generated by gencpp from file nav_2d_msgs/NavGridInfo.msg
// DO NOT EDIT!


#ifndef NAV_2D_MSGS_MESSAGE_NAVGRIDINFO_H
#define NAV_2D_MSGS_MESSAGE_NAVGRIDINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nav_2d_msgs
{
template <class ContainerAllocator>
struct NavGridInfo_
{
  typedef NavGridInfo_<ContainerAllocator> Type;

  NavGridInfo_()
    : width(0)
    , height(0)
    , resolution(0.0)
    , frame_id()
    , origin_x(0.0)
    , origin_y(0.0)  {
    }
  NavGridInfo_(const ContainerAllocator& _alloc)
    : width(0)
    , height(0)
    , resolution(0.0)
    , frame_id(_alloc)
    , origin_x(0.0)
    , origin_y(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;

   typedef double _resolution_type;
  _resolution_type resolution;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef double _origin_x_type;
  _origin_x_type origin_x;

   typedef double _origin_y_type;
  _origin_y_type origin_y;





  typedef boost::shared_ptr< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> const> ConstPtr;

}; // struct NavGridInfo_

typedef ::nav_2d_msgs::NavGridInfo_<std::allocator<void> > NavGridInfo;

typedef boost::shared_ptr< ::nav_2d_msgs::NavGridInfo > NavGridInfoPtr;
typedef boost::shared_ptr< ::nav_2d_msgs::NavGridInfo const> NavGridInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nav_2d_msgs::NavGridInfo_<ContainerAllocator1> & lhs, const ::nav_2d_msgs::NavGridInfo_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.resolution == rhs.resolution &&
    lhs.frame_id == rhs.frame_id &&
    lhs.origin_x == rhs.origin_x &&
    lhs.origin_y == rhs.origin_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nav_2d_msgs::NavGridInfo_<ContainerAllocator1> & lhs, const ::nav_2d_msgs::NavGridInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nav_2d_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "061e7a10093a3d95bf6b212dff9d9715";
  }

  static const char* value(const ::nav_2d_msgs::NavGridInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x061e7a10093a3d95ULL;
  static const uint64_t static_value2 = 0xbf6b212dff9d9715ULL;
};

template<class ContainerAllocator>
struct DataType< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_2d_msgs/NavGridInfo";
  }

  static const char* value(const ::nav_2d_msgs::NavGridInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 width\n"
"uint32 height\n"
"float64 resolution\n"
"string frame_id\n"
"float64 origin_x\n"
"float64 origin_y\n"
;
  }

  static const char* value(const ::nav_2d_msgs::NavGridInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.resolution);
      stream.next(m.frame_id);
      stream.next(m.origin_x);
      stream.next(m.origin_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavGridInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav_2d_msgs::NavGridInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav_2d_msgs::NavGridInfo_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "resolution: ";
    Printer<double>::stream(s, indent + "  ", v.resolution);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "origin_x: ";
    Printer<double>::stream(s, indent + "  ", v.origin_x);
    s << indent << "origin_y: ";
    Printer<double>::stream(s, indent + "  ", v.origin_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_2D_MSGS_MESSAGE_NAVGRIDINFO_H
