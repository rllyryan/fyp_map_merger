# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_msgs/BMSData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BMSData(genpy.Message):
  _md5sum = "d60e43d26f083554a17e9b16c16317d3"
  _type = "mir_msgs/BMSData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 pack_voltage
float64 charge_current
float64 discharge_current
int32 state_of_charge
float64 remaining_time_to_full_charge
int32 remaining_capacity
int32 state_of_health
int32 DISCHARGING=1 #bit 0
int32 CHARGING=2    #bit 1
int32 OV=4         #bit 2 Over voltage
int32 UV=8          #bit 3 Under voltage
int32 COC=16         #bit 4 Charge over current
int32 DOC=32         #bit 5 Discharge over current
int32 DOT=64         #bit 6 Discharge over temperature
int32 DUT=128         #bit 7 Discharge under temperature
int32  SC=512         #bit 9
int32 COT=1024         #bit 10 Charge over temperature
int32 CUT=2048         #bit 11 Charge under temperature
int32 FW_STATUS_MSK=2031616 # to get Battery_Firmware_Status  do the following:
int32 FW_STATUS_SHIFT=16    # batt_fw_stat=(status_flags & FW_STATUS_MSK)>>FW_STATUS_SHIFT
int32 FW_UPD_OK=0                  #Battery firmware update finished OK.
int32 FW_UPD_RUNNING=1             #Battery firmware update running.
int32 FW_UPD_FAILED_BOOT=2         #Battery firmware update failed in Bootloader (Robot must not drive)
int32 FW_UPD_FAILED_APP=3          #Battery firmware update failed updating the application (Robot can drive with old FW)
int32 FW_UPD_FAILED_PARAM=4        #Battery firmware update failed uploading parameters (Robot can drive with old fw and parameters.)
int32 FW_STATUS_LOW_BATT=5         #Battery firmware update skipped battery too low (Robot can drive with old parameters.)
int32 FW_STATUS_FILE_CORRUPTED=6   #Battery firmware file corrupted (Robot can drive with old parameters.)
int32 FW_STATUS_CURRENT_TO_HIGH=7  #Battery firmware file corrupted (Robot can drive with old parameters.)
int32 FW_STATUS_NO_CAN=8           #Battery firmware update skipped no CAN communication (Robot can drive with old fw and parameters.)
int32 FW_BATTERY_IMBALANCE_HIGH=9  #Battery firmware update is enforced and the battery will be shut off by the new firmware
int32 status_flags
int32 temperature
uint32[] cell_voltage # In Mk2 robots and above the BMS provides data for 8 battery cells. 2Gen robots have BMS for 13 battery cells

# Exteded diagnosticts for BMZ battery
uint32 bmz_flag # Flag for enabling extended diagnosticts
float64 full_voltage
int32 full_capacity
int32 temperature2
int32 temperature3
int32 cycle_count
int32 dsg_overcurrent_counter
int32 chg_overcurrent_counter
int32 hw_major
int32 hw_minor
int32 fw_major
int32 fw_minor
int32 fw_patch
int32 rec_fw_major
int32 rec_fw_minor
int32 bl_major
int32 bl_minor
uint32 status_enabled
uint32 status_current_limitation
uint32 status_switch_off_warn1
uint32 status_switch_off_warn2
uint32 status_fully_discharged
uint32 status_nearly_discharged
uint32 status_chargefet_on
uint32 status_dischargefet_on
uint32 status_discharging
uint32 status_fully_charged
uint32 status_charging
uint32 status_temp_charging_err
uint32 status_cell_over_voltage
uint32 status_cell_under_voltage
uint32 status_charge_over_current
uint32 status_shortcircuit
uint32 status_discharge_over_current
uint32 status_temp_discharging_err
uint32 status_charger_detected

float64 last_battery_msg_time
"""
  # Pseudo-constants
  DISCHARGING = 1
  CHARGING = 2
  OV = 4
  UV = 8
  COC = 16
  DOC = 32
  DOT = 64
  DUT = 128
  SC = 512
  COT = 1024
  CUT = 2048
  FW_STATUS_MSK = 2031616
  FW_STATUS_SHIFT = 16
  FW_UPD_OK = 0
  FW_UPD_RUNNING = 1
  FW_UPD_FAILED_BOOT = 2
  FW_UPD_FAILED_APP = 3
  FW_UPD_FAILED_PARAM = 4
  FW_STATUS_LOW_BATT = 5
  FW_STATUS_FILE_CORRUPTED = 6
  FW_STATUS_CURRENT_TO_HIGH = 7
  FW_STATUS_NO_CAN = 8
  FW_BATTERY_IMBALANCE_HIGH = 9

  __slots__ = ['pack_voltage','charge_current','discharge_current','state_of_charge','remaining_time_to_full_charge','remaining_capacity','state_of_health','status_flags','temperature','cell_voltage','bmz_flag','full_voltage','full_capacity','temperature2','temperature3','cycle_count','dsg_overcurrent_counter','chg_overcurrent_counter','hw_major','hw_minor','fw_major','fw_minor','fw_patch','rec_fw_major','rec_fw_minor','bl_major','bl_minor','status_enabled','status_current_limitation','status_switch_off_warn1','status_switch_off_warn2','status_fully_discharged','status_nearly_discharged','status_chargefet_on','status_dischargefet_on','status_discharging','status_fully_charged','status_charging','status_temp_charging_err','status_cell_over_voltage','status_cell_under_voltage','status_charge_over_current','status_shortcircuit','status_discharge_over_current','status_temp_discharging_err','status_charger_detected','last_battery_msg_time']
  _slot_types = ['float64','float64','float64','int32','float64','int32','int32','int32','int32','uint32[]','uint32','float64','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pack_voltage,charge_current,discharge_current,state_of_charge,remaining_time_to_full_charge,remaining_capacity,state_of_health,status_flags,temperature,cell_voltage,bmz_flag,full_voltage,full_capacity,temperature2,temperature3,cycle_count,dsg_overcurrent_counter,chg_overcurrent_counter,hw_major,hw_minor,fw_major,fw_minor,fw_patch,rec_fw_major,rec_fw_minor,bl_major,bl_minor,status_enabled,status_current_limitation,status_switch_off_warn1,status_switch_off_warn2,status_fully_discharged,status_nearly_discharged,status_chargefet_on,status_dischargefet_on,status_discharging,status_fully_charged,status_charging,status_temp_charging_err,status_cell_over_voltage,status_cell_under_voltage,status_charge_over_current,status_shortcircuit,status_discharge_over_current,status_temp_discharging_err,status_charger_detected,last_battery_msg_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BMSData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pack_voltage is None:
        self.pack_voltage = 0.
      if self.charge_current is None:
        self.charge_current = 0.
      if self.discharge_current is None:
        self.discharge_current = 0.
      if self.state_of_charge is None:
        self.state_of_charge = 0
      if self.remaining_time_to_full_charge is None:
        self.remaining_time_to_full_charge = 0.
      if self.remaining_capacity is None:
        self.remaining_capacity = 0
      if self.state_of_health is None:
        self.state_of_health = 0
      if self.status_flags is None:
        self.status_flags = 0
      if self.temperature is None:
        self.temperature = 0
      if self.cell_voltage is None:
        self.cell_voltage = []
      if self.bmz_flag is None:
        self.bmz_flag = 0
      if self.full_voltage is None:
        self.full_voltage = 0.
      if self.full_capacity is None:
        self.full_capacity = 0
      if self.temperature2 is None:
        self.temperature2 = 0
      if self.temperature3 is None:
        self.temperature3 = 0
      if self.cycle_count is None:
        self.cycle_count = 0
      if self.dsg_overcurrent_counter is None:
        self.dsg_overcurrent_counter = 0
      if self.chg_overcurrent_counter is None:
        self.chg_overcurrent_counter = 0
      if self.hw_major is None:
        self.hw_major = 0
      if self.hw_minor is None:
        self.hw_minor = 0
      if self.fw_major is None:
        self.fw_major = 0
      if self.fw_minor is None:
        self.fw_minor = 0
      if self.fw_patch is None:
        self.fw_patch = 0
      if self.rec_fw_major is None:
        self.rec_fw_major = 0
      if self.rec_fw_minor is None:
        self.rec_fw_minor = 0
      if self.bl_major is None:
        self.bl_major = 0
      if self.bl_minor is None:
        self.bl_minor = 0
      if self.status_enabled is None:
        self.status_enabled = 0
      if self.status_current_limitation is None:
        self.status_current_limitation = 0
      if self.status_switch_off_warn1 is None:
        self.status_switch_off_warn1 = 0
      if self.status_switch_off_warn2 is None:
        self.status_switch_off_warn2 = 0
      if self.status_fully_discharged is None:
        self.status_fully_discharged = 0
      if self.status_nearly_discharged is None:
        self.status_nearly_discharged = 0
      if self.status_chargefet_on is None:
        self.status_chargefet_on = 0
      if self.status_dischargefet_on is None:
        self.status_dischargefet_on = 0
      if self.status_discharging is None:
        self.status_discharging = 0
      if self.status_fully_charged is None:
        self.status_fully_charged = 0
      if self.status_charging is None:
        self.status_charging = 0
      if self.status_temp_charging_err is None:
        self.status_temp_charging_err = 0
      if self.status_cell_over_voltage is None:
        self.status_cell_over_voltage = 0
      if self.status_cell_under_voltage is None:
        self.status_cell_under_voltage = 0
      if self.status_charge_over_current is None:
        self.status_charge_over_current = 0
      if self.status_shortcircuit is None:
        self.status_shortcircuit = 0
      if self.status_discharge_over_current is None:
        self.status_discharge_over_current = 0
      if self.status_temp_discharging_err is None:
        self.status_temp_discharging_err = 0
      if self.status_charger_detected is None:
        self.status_charger_detected = 0
      if self.last_battery_msg_time is None:
        self.last_battery_msg_time = 0.
    else:
      self.pack_voltage = 0.
      self.charge_current = 0.
      self.discharge_current = 0.
      self.state_of_charge = 0
      self.remaining_time_to_full_charge = 0.
      self.remaining_capacity = 0
      self.state_of_health = 0
      self.status_flags = 0
      self.temperature = 0
      self.cell_voltage = []
      self.bmz_flag = 0
      self.full_voltage = 0.
      self.full_capacity = 0
      self.temperature2 = 0
      self.temperature3 = 0
      self.cycle_count = 0
      self.dsg_overcurrent_counter = 0
      self.chg_overcurrent_counter = 0
      self.hw_major = 0
      self.hw_minor = 0
      self.fw_major = 0
      self.fw_minor = 0
      self.fw_patch = 0
      self.rec_fw_major = 0
      self.rec_fw_minor = 0
      self.bl_major = 0
      self.bl_minor = 0
      self.status_enabled = 0
      self.status_current_limitation = 0
      self.status_switch_off_warn1 = 0
      self.status_switch_off_warn2 = 0
      self.status_fully_discharged = 0
      self.status_nearly_discharged = 0
      self.status_chargefet_on = 0
      self.status_dischargefet_on = 0
      self.status_discharging = 0
      self.status_fully_charged = 0
      self.status_charging = 0
      self.status_temp_charging_err = 0
      self.status_cell_over_voltage = 0
      self.status_cell_under_voltage = 0
      self.status_charge_over_current = 0
      self.status_shortcircuit = 0
      self.status_discharge_over_current = 0
      self.status_temp_discharging_err = 0
      self.status_charger_detected = 0
      self.last_battery_msg_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3did4i().pack(_x.pack_voltage, _x.charge_current, _x.discharge_current, _x.state_of_charge, _x.remaining_time_to_full_charge, _x.remaining_capacity, _x.state_of_health, _x.status_flags, _x.temperature))
      length = len(self.cell_voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.cell_voltage))
      _x = self
      buff.write(_get_struct_Id15i19Id().pack(_x.bmz_flag, _x.full_voltage, _x.full_capacity, _x.temperature2, _x.temperature3, _x.cycle_count, _x.dsg_overcurrent_counter, _x.chg_overcurrent_counter, _x.hw_major, _x.hw_minor, _x.fw_major, _x.fw_minor, _x.fw_patch, _x.rec_fw_major, _x.rec_fw_minor, _x.bl_major, _x.bl_minor, _x.status_enabled, _x.status_current_limitation, _x.status_switch_off_warn1, _x.status_switch_off_warn2, _x.status_fully_discharged, _x.status_nearly_discharged, _x.status_chargefet_on, _x.status_dischargefet_on, _x.status_discharging, _x.status_fully_charged, _x.status_charging, _x.status_temp_charging_err, _x.status_cell_over_voltage, _x.status_cell_under_voltage, _x.status_charge_over_current, _x.status_shortcircuit, _x.status_discharge_over_current, _x.status_temp_discharging_err, _x.status_charger_detected, _x.last_battery_msg_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.pack_voltage, _x.charge_current, _x.discharge_current, _x.state_of_charge, _x.remaining_time_to_full_charge, _x.remaining_capacity, _x.state_of_health, _x.status_flags, _x.temperature,) = _get_struct_3did4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cell_voltage = s.unpack(str[start:end])
      _x = self
      start = end
      end += 156
      (_x.bmz_flag, _x.full_voltage, _x.full_capacity, _x.temperature2, _x.temperature3, _x.cycle_count, _x.dsg_overcurrent_counter, _x.chg_overcurrent_counter, _x.hw_major, _x.hw_minor, _x.fw_major, _x.fw_minor, _x.fw_patch, _x.rec_fw_major, _x.rec_fw_minor, _x.bl_major, _x.bl_minor, _x.status_enabled, _x.status_current_limitation, _x.status_switch_off_warn1, _x.status_switch_off_warn2, _x.status_fully_discharged, _x.status_nearly_discharged, _x.status_chargefet_on, _x.status_dischargefet_on, _x.status_discharging, _x.status_fully_charged, _x.status_charging, _x.status_temp_charging_err, _x.status_cell_over_voltage, _x.status_cell_under_voltage, _x.status_charge_over_current, _x.status_shortcircuit, _x.status_discharge_over_current, _x.status_temp_discharging_err, _x.status_charger_detected, _x.last_battery_msg_time,) = _get_struct_Id15i19Id().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3did4i().pack(_x.pack_voltage, _x.charge_current, _x.discharge_current, _x.state_of_charge, _x.remaining_time_to_full_charge, _x.remaining_capacity, _x.state_of_health, _x.status_flags, _x.temperature))
      length = len(self.cell_voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.cell_voltage.tostring())
      _x = self
      buff.write(_get_struct_Id15i19Id().pack(_x.bmz_flag, _x.full_voltage, _x.full_capacity, _x.temperature2, _x.temperature3, _x.cycle_count, _x.dsg_overcurrent_counter, _x.chg_overcurrent_counter, _x.hw_major, _x.hw_minor, _x.fw_major, _x.fw_minor, _x.fw_patch, _x.rec_fw_major, _x.rec_fw_minor, _x.bl_major, _x.bl_minor, _x.status_enabled, _x.status_current_limitation, _x.status_switch_off_warn1, _x.status_switch_off_warn2, _x.status_fully_discharged, _x.status_nearly_discharged, _x.status_chargefet_on, _x.status_dischargefet_on, _x.status_discharging, _x.status_fully_charged, _x.status_charging, _x.status_temp_charging_err, _x.status_cell_over_voltage, _x.status_cell_under_voltage, _x.status_charge_over_current, _x.status_shortcircuit, _x.status_discharge_over_current, _x.status_temp_discharging_err, _x.status_charger_detected, _x.last_battery_msg_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.pack_voltage, _x.charge_current, _x.discharge_current, _x.state_of_charge, _x.remaining_time_to_full_charge, _x.remaining_capacity, _x.state_of_health, _x.status_flags, _x.temperature,) = _get_struct_3did4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cell_voltage = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 156
      (_x.bmz_flag, _x.full_voltage, _x.full_capacity, _x.temperature2, _x.temperature3, _x.cycle_count, _x.dsg_overcurrent_counter, _x.chg_overcurrent_counter, _x.hw_major, _x.hw_minor, _x.fw_major, _x.fw_minor, _x.fw_patch, _x.rec_fw_major, _x.rec_fw_minor, _x.bl_major, _x.bl_minor, _x.status_enabled, _x.status_current_limitation, _x.status_switch_off_warn1, _x.status_switch_off_warn2, _x.status_fully_discharged, _x.status_nearly_discharged, _x.status_chargefet_on, _x.status_dischargefet_on, _x.status_discharging, _x.status_fully_charged, _x.status_charging, _x.status_temp_charging_err, _x.status_cell_over_voltage, _x.status_cell_under_voltage, _x.status_charge_over_current, _x.status_shortcircuit, _x.status_discharge_over_current, _x.status_temp_discharging_err, _x.status_charger_detected, _x.last_battery_msg_time,) = _get_struct_Id15i19Id().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3did4i = None
def _get_struct_3did4i():
    global _struct_3did4i
    if _struct_3did4i is None:
        _struct_3did4i = struct.Struct("<3did4i")
    return _struct_3did4i
_struct_Id15i19Id = None
def _get_struct_Id15i19Id():
    global _struct_Id15i19Id
    if _struct_Id15i19Id is None:
        _struct_Id15i19Id = struct.Struct("<Id15i19Id")
    return _struct_Id15i19Id
